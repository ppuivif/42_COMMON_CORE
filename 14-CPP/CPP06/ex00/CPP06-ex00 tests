CPP06 - ex00 : Conversion of scalar types

-----------------------------------------------------------------------------------------------

tests parsing général :
	- pas d'argument :
		./scalarconverter
	- 1 argument vide :
		./scalarconverter ""
	- 2 arguments :
		./scalarconverter a b
	- 

tests sur char :
	- argument = digit
		./scalarconverter 5
	- argument = string
		./scalarconverter ab
	- argument = string avec space
		./scalarconverter "a b"

	- argument = char entre single quotes
		./scalarconverter 'a'
	- argument = char entre double quotes
		./scalarconverter "a"

	- argument = char avec space avant
		./scalarconverter " a"
	- argument = char avec space après
		./scalarconverter "a "

	- argument = non printable
		./scalarconverter '\n'
	- argument = non printable
		./scalarconverter "\n"
	- argument = non printable
		./scalarconverter \\n

	- argument = printable
		./scalarconverter \n


-----------------------------------------------------------------------------------------------

tests souffrance LANCELOT

# **************************************************************************** #
#                                PSEUDO LITERALS                               #
# **************************************************************************** #

./convert -inff
char: impossible
int: impossible
float: -inff
double : -inf

./convert +inff
char: impossible
int: impossible
float: +inff
double : +inf

./convert nanf
char: impossible
int: impossible
float: nanf
double : nan

./convert -inf
char: impossible
int: impossible
float: -inff
double : -inf

./convert +inf
char: impossible
int: impossible
float: +inff
double : +inf

./convert nan
char: impossible
int: impossible
float: nanf
double : nan

# **************************************************************************** #
#                                  CHARACTERS                                  #
# **************************************************************************** #

./convert '	'	-> HORIZONTAL TAB (CTRL V + TAB)
char: Non displayable
int: 9
float: 9.0f
double : 9.0

./convert '^['		-> ESCAPE (CTRL V + ESC)
char: Non displayable
int: 27
float: 27.0f
double : 27.0

./convert ' '
char: ' '
int: 32
float: 32.0f
double : 32.0

./convert '0'
char: '0'
int: 48
float: 48.0f
double : 48.0

./convert 'A'
char: 'A'
int: 65
float: 65.0f
double : 65.0

./convert 'a'
char: 'a'
int: 97
float: 97.0f
double : 97.0

./convert '^?'		-> DEL (CTRL V + DEL)
char: Non displayable
int: 127
float: 127.0f
double : 127.0

# **************************************************************************** #
#                                   INTEGERS                                   #
# **************************************************************************** #

For values above the limits, you have the choice to not handling them and displaying an error message, or you can handle them as follows:

./convert -2147483649
char: impossible
int: impossible
float: -2.14748e+09f
double : -2.14748e+09

----------

./convert -2147483648	-> INT_MIN
char: impossible
int: -2147483648
float: -2.14748e+09f
double : -2.14748e+09

./convert 2147483647	-> INT_MAX
char: impossible
int: 2147483647
float: 2.14748e+09f
double : 2.14748e+09

./convert 42
char: '*'
int: 42
float: 42.0f
double : 42.0

# **************************************************************************** #
#                                    FLOAT                                     #
# **************************************************************************** #

As with integers, it's up to you to manage the limits as you wish.

./convert -340282346638528859811704183484516925440.0f	-> FLT_MIN
char: impossible
int: impossible
float: -3.40282e+38f
double: -3.40282e+38

./convert 340282346638528859811704183484516925440.0f	-> FLT_MAX
char: impossible
int: impossible
float: 3.40282e+38f
double: 3.40282e+38

./convert 42.0f
char: '*'
int: 42
float: 42.0f
double: 42.0

./convert 0.00000000000000000000000000000000000001f
char: Non displayable
int: 0
float: 1e-38f
double: 1e-38

./convert 0.000000000000000000000000000000000000001f
char: Non displayable
int: 0
float: impossible
double: 1e-39

# **************************************************************************** #
#                                    DOUBLE                                    #
# **************************************************************************** #

As with integers and floats, it's up to you to manage the limits as you wish.

./convert -179769313486231570814527423731704356798070567525844996598917476803157
26078002853876058955863276687817154045895351438246423432132688946418276846754670
35375169860499105765512820762454900903893289440758685084551339423045832369032229
48165808559332123348274797826204144723168738177180919299881250404026184124858368.0000000000000000	-> DBL_MIN
char: impossible
int: impossible
float: impossible
double: -1.79769e+308

./convert 1797693134862315708145274237317043567980705675258449965989174768031572
60780028538760589558632766878171540458953514382464234321326889464182768467546703
53751698604991057655128207624549009038932894407586850845513394230458323690322294
8165808559332123348274797826204144723168738177180919299881250404026184124858368.0000000000000000	-> DBL_MAX
char: impossible
int: impossible
float: impossible
double: 1.79769e+308

./convert 42.0
char: '*'
int: 42
float: 42.0f
double: 42.0

./convert 0.00000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000001 
char: Non displayable
int: 0
float: impossible
double: 1e-308

./convert 0.00000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000001 
char: Non displayable
int: 0
float: impossible
double: impossible




