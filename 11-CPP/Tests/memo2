CPP

-----------------------------------------------------------------------------------------------
Vidéo 42 : Inheritance C++

L'héritage est un moyen de factoriser des comportements d'une série de classes différentes qui
ont des comportements très similaires et de les rassembler dans une même classe pour ensuite
permettre aux objets dérivés d'utiliser ces comportements.

Exemple d'implémentation (définition) : heritage.cpp

#include <string>

class Cat
{
	private:
		int	_numberOfLegs;
	
	public
		Cat();
		Cat(Cat const &);
		Cat& operator-(Cat const &);
		~Cat();
		
		void	run(int distance);
		
		void	scornSomeone(std::string const & target);
};

class Pony
{
	private:
		int	_numberOfLegs();

	public:
		Pony();
		Pony(Pony const &);
		Pony& operator-(Pony const &);
		~Pony();
		
		void	run(int distance);
		
		void	doMagic(std::string const & target);
};

A chaque création d'un animal, on voit dans cet exemple qu'il faut ré-implémenter le nombre de
pattes, le fait que l'animal court, ...

L'héritage permet de dire que le poney et le chat sont tous les 2 des animaux avec l'intérêt
de créer une classe animal avec des caracteristiques communes. Le chat et le poney peuvent
alors "hériter" de ces caractéristiques communes.

Exemple d'implémentation (définition) : heritage2.cpp

#include <string>

class Animal
{
	private:
		int	_numberOfLegs;
	
	public
		Animal();
		Animal(Animal const &);
		Animal& operator=(Animal const &);
		~Animal();
		
		void	run(int distance);
		void	call(); //ces fonctions membres qui ont été rajoutées sont
				  transmises à ceux qui en héritent (dérivés)
		void 	eat(std::string const & what);
		void	walk(int distance);
};

class Cat : public Animal //le chat hérite publiquement de l'animal
{
	public:
		Cat();
		Cat(Cat const &);
		Cat& operator=(Cat const &);
		~Cat();
		
		void	scornSomeone(std::string const & target); // le chat est un animal
								     qui a des comportements
								     propres
};

class Pony : public Animal //le poney hérite publiquement de l'animal
{
	public:
		Pony();
		Pony(Cat const &);
		Pony& operator=(Pony const &);
		~Pony();
		
		void	doMagic(std::string const & target); // le poney est un animal
								qui a des comportements
								propres
		void	run(int distance); // le poney a une façon spécifique de courir et
					      cette nouvelle implémentation remplace celle
					      héritée de la classe Animal 
};

Attention :
	- voir comment appeler le constructeur du parent,
	- voir comment s'assurer que les destructeurs sont appelés pour les 2.
Dire qu'un chat hérite d'un animal signifie que le chat a une partie animal. Le chat est un
animal, mais pas seulement. Quand j'instancie un chat, il faut instancier avant cela un
animal puis instancier ce qui est spécifique au chat pour faire un chat et pas seulement un
animal.

5'53

Protected est un nouveau niveau d'encapsulation utilisé seulement dans le cas de l'héritage.
Il va se rajoutter public et private.
Public est accessible de n'importe où.
Protected est accessible uniquement par une instance de la classe ou une instance de la
classe dérivée.
Private est accessible uniquement depuis une instance de la classe seulement et non pas des
classes dérivées.

Exemple de déclaration :

class Quadruped //can access name, run() ans logs
{
	private:
		std::string	name; //only accessible froma Quadruped object

	protected:
		Leg		legs[4]; //accessible from a Quadruped object or derivated
					object
	
	public:
		void		run(); //accessible from wherever
};

class Dog : public Quadruped //can access run() and legs
{

};

Exemple de main :
int main() //can only access run()
{

{

7'50"

Les niveaux d'encapsulation d'héritage

Pour hériter, on a vu précédemment que l'on indiquait le niveau d'encapsulation d'héritage
à savoir public jusqu'à présent.

Exemple de déclaration :

class Pony : public Animal

Mais on peut aussi utiliser les niveaux d'encapsulation d'héritage protected et private.
Cela a pour conséquence de modifier les niveaux d'encapsulation des attributs de la classe
mère.

8'30"

L'héritage multiple

Jusqu'à présent la classe fille héritait d'une classe à la fois.
Elle peut aussi hériter de plusieurs classes pour avoir les comportements de ces classes.
La difficulté intervient dès lors que chacune des classes mère définit des fonctions ou
variables identiques avec des comportements différents.
Voir jusqu'à un héritage en diamant.

-----------------------------------------------------------------------------------------------

