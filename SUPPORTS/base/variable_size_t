https://www.geeksforgeeks.org/size_t-data-type-c-language/

What is the size_t data type in C?

size_t is an unsigned integer data type that is defined in various header files such as:
<stddef.h>, <stdio.h>, <stdlib.h>, <string.h>, <time.h>, <wchar.h>


Itâ€™s a type which is used to represent the size of objects in bytes and is therefore used as the return type by the sizeof operator. It is guaranteed to be big enough to contain the size of the biggest object the host system can handle. Basically the maximum permissible size is dependent on the compiler; if the compiler is 32 bit then it is simply a typedef(i.e., alias) for unsigned int (UINT_MAX == 4 294 967 295) but if the compiler is 64 bit then it would be a typedef for unsigned long long (ULLONG_MAX == 18446744073709551615). The size_t data type is never negative.
Therefore many C library functions like malloc, memcpy and strlen declare their arguments and return type as size_t.


size_t or any unsigned type might be seen used as loop variable as loop variables are typically greater than or equal to 0.
Note: When we use a size_t object, we have to make sure that in all the contexts it is used, including arithmetic, we want only non-negative values.


Advantages of using size_t in C programming:
Portability: The size_t data type is defined in the stddef.h header, which is part of the C standard library. By using size_t, you can ensure that your code is portable across different platforms and compilers.
Unsigned: size_t is an unsigned integer type, which means it can represent sizes up to the maximum size of unsigned integers. This is useful when dealing with arrays and memory blocks, as sizes can never be negative.
Performance: size_t is usually implemented as a fast and efficient integer type, and using it can result in better performance than using other integer types.
Clear intent: Using size_t makes it clear to the reader of your code that you are dealing with sizes and not other types of integers. This makes the code easier to understand and less prone to errors.
Standardization: By using size_t, you are following a widely used and accepted standard, which makes your code more readable and maintainable for other programmers.
Interoperability: size_t is widely used in many libraries and APIs, and using it in your code allows for easier integration with other code.

