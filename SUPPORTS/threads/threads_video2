https://www.youtube.com/watch?v=ldJ8WGZVXZk

-----------------------------------------------------------------------------------------------

A regular C program is what we could call a single threaded program where we have one sequence
of statements that executes over time.
A multi-threaded program has multiple sequences of statements that execute over the same period
of time. So we could have 2 streams of statements essentially being executed over the same
period of time.

Multi-threaded programs can execute in parallel or they can execute concurrently.
If we have 2 threads that are executing statememts at the same moment in time, we would say
they're executing in parallel.
It's not always possible for threads to execute in parallel. Sometimes the hardware and software
doesn't support that.
So if the CPU can only execute one thread at time, what will happen instead is concurrent
execution where the CPU will switch back and forth between executing multiple threads. So even
though the threads are executing over the same period of time at any particularmoment in time
only one of the threads is executing and the CPU is switching between them.
Whether the threads execute in parallel or merely concurrently there's a potential for an
improvement in performance.
Threads add a layer of complexity but sometimes it can be worth it if the performance of our
program improves by using threads.

-----------------------------------------------------------------------------------------------

How to create threads in C :

We're going to use the "p thread" library.
The way the "p thread" works is we call "p thread create" to create a thread and we give it a
function that we want to run. That function will run in its own thread.
To join this thread back with the main thread, we're going to use "p thread join". "p thread"
join is going to pause and wait until this thread has completed its work. Now it's possible
by the time "p thread join" runs the thread has already completed its work. But if the thread
hasn't completed its work by the time "p thread join" runs execution will just pause here and
wait for it to complete its work.
That's the main idea with "p thread" is we create the thread, it runs a function and then we can
join this thread back with our main thread of execution using p thread join.

-----------------------------------------------------------------------------------------------

#include <pthread.h>

void *computation(void * add);


int main ()
{
	pthread_t	thread1;//create a p thread variable
	pthread_t	thread2;//create a p thread variable

	long value1 = 1;
	long value1 = 2;
		
	pthread_create(&thread1, NULL, computation, (void *) &value1);//create a thread to execute \
	computation function in a separate thread

	pthread_create(&thread2, NULL, computation, (void *) &value1);
	
	pthread_join(thread1, NULL);//join the thread of execution back with the main thread when \
	it's done (NULL is the argument which could be used to work with return value from that \
	function)
	
	pthread_join(thread2, NULL);
}


void *computation(void *add)
{
	long *add_num = (long *) (add)
	printf("Add : %ld\n", *add_num);
	return NULL;
}


