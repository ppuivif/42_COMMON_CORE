Fichier expand_utils_14.c

-----------------------------------------------------------------------------------------------

la fonction check_path_in_envp est appelée par la fonction check_command_with_options.
	- elle fait appel à la fonction search_path qui crée un tableau de char * contenant
	tous les chemin du PATH de l'environnement.
	- si search_path ne trouve pas de variable PATH dans l'environnement (cas du UNSET PATH),
	la fonction search_path retourne NULL,
	- si search_path trouve une variable PATH dans l'environnement mais dans le cas où elle ne
	contient aucun chemin (cas du export PATH=), la fonction search_path retourne un tableau
	vide,
	- dans ces deux cas (si le PATH n'existe pas, ou si il est vide), la fonction
	check_path_in_envp appelle la fonction check_when_no_path,
	- sinon elle appelle la fonction check_when_path_exists,
	- le tableau path_envp est free et mis à NULL.

-----------------------------------------------------------------------------------------------

la fonction check_when_no_path :
	- le path n'existe pas ou est vide : toutefois, il faut vérifier si l'argument fourni est un
	exécutable (exemple : minishell).
	- un access permet de vérifier si l'argument est bien un fichier,
	- un access permet de vérifier si l'argument est bien un fichier exécutable,
	- si l'argument est un fichier exécutable, l'argument est concaténé avec ./ l'exit_code est
	mis à 0 et la concaténation est conservé comme nouvelle valeur de l'argument,
	- si l'argument est un fichier mais non exécutable, le message d'erreur correspondant est
	affiché, l'exit_code est modifié et la variable exec_arguments->is_argument_valid est mise
	à false.
	- si l'argument n'est pas un fichier, le message d'erreur correspondant est affiché,
	l'exit_code est modifié et la variable exec_arguments->is_argument_valid est mise à false.

-----------------------------------------------------------------------------------------------

la fonction check_when_path_exists :
	- si le premier argument est vide (ex : "" ou ' '), la fonction no_valid_command est
	appelée. Le message d'erreur correspondant "command not found" est affiché, l'exit_code
	est modifié	et la variable exec_arguments->is_argument_valid est mise à false.
	- si l'argument n'est pas vide, la fonction check_path_cmd_validity est appelée pour tester
	l'argument concaténé avec chaque chemin du path. En fonction du retour de cette fonction :
		- si le chemin concaténé avec la commande est valide (vérifié avec un access),
		l'exit_code prend la valeur 0,
		- si le chemin concaténé avec la commande est valide mais non accessible, la fonction
		no_permission_on_cmd_with_path est appelée. Le message d'erreur correspondant 
		"permission denied" est affiché, l'exit_code est modifié et la variable
		exec_arguments->is_argument_valid est mise à false.
		- si aucun chemin concaténé avec la commande n'est valide, la fonction no_valid_command
		est appelée. Le message d'erreur correspondant "command not found" est affiché,
		l'exit_code est modifié et la variable exec_arguments->is_argument_valid est mise à
		false.


-----------------------------------------------------------------------------------------------
